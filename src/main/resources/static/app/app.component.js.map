{"version":3,"file":"app.component.js","sourceRoot":"","sources":["../Users/charlie/Employment/Mapp/mapp_challenge/spring-angular2-cli-starter/src/main/frontend/tmp/broccoli_type_script_compiler-input_base_path-OuxFFkyK.tmp/0/src/app/app.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  moduleId: module.id,\n  selector: 'dl-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css']\n})\n\nexport class AppComponent {\n    title: string = \"Crazy Charlie's House of Deals\";\n    products: Product[] = PRODUCTS;\n    // The customer whose basket will appear on the screen.\n    customer: Customer = new Customer(\"\");\n    // All known customers.  Begins lifecycle empty.\n    customers: Customer[] = [this.customer];\n\n    // Switch to the customer whose username was entered.\n    // If no such customer doesn't exist, create one.\n    // AppComponent initialized with anonymous customer; if that is the current\n    // customer, assign name to it but leave basket as is.\n    switchTo(username: string): void {\n\tif (!username) {\n\t    // Don't create a customer with an empty username.\n\t    return;\n\t}\n\tif (!this.customer.username) {\n\t    // If the current customer is anonymous, give it the input name.\n\t    this.customer.username = username;\n\t    return;\n\t}\n\tfor (var i = 0; i < this.customers.length; ++i) {\n\t    // Search through known customers for input username; switch to that customer.\n\t    if (this.customers[i].username === username) {\n\t\tthis.customer = this.customers[i];\n\t\treturn;\n\t    }\n\t}\n\t// If there is no customer with that name, create a new customer.\n\tthis.customer = new Customer(username);\n\tthis.customers.push(this.customer);\n    }\n\n    // Check to see if the product is in stock, then let the customer buy it.\n    buy(product: Product): void {\n\tif (product.inventory > 0) {\n\t    product.inventory -= 1;\n\t    this.customer.basket.buy(product);\n\t}\n    }\n\n    // Let the customer unbuy the product.  If the customer has an item to return,\n    // add it back to the inventory.\n    unbuy(product: Product): void {\n\tproduct.inventory += this.customer.basket.unbuy(product);\n    }\n\n    // Print price in the German style.\n    prettyPrice(price: number): string {\n\treturn price.toLocaleString('de-DE', { style: 'currency', currency: 'EUR'});\n    }\n}\n\n// This class stores information about price per number of units.\nexport class Deal {\n    // The number of units that must be bought to trigger the price.\n    count: number;\n    // The price.\n    price: number;\n    \n    constructor(count: number, price: number) {\n\tthis.count = count;\n\tthis.price = price;\n    }\n}\n\n// This class stores information about the products in the store.\nexport class Product {\n    // Used to identify products.\n    id: number;\n    // Product's display name.\n    name:string;\n    // Description of the product.\n    snippet: string;\n    // Prices at which the product is available.\n    // Must contain deal with count of 1.\n    // Must be sorted in ascending order by count.\n    // Counts must be unique.\n    deals: Deal[];\n    // Name of the file containing a picture of the product.\n    // Picture must be stored in $PROJECT_HOME/src/main/frontend/src/img\n    imgsrc: string;\n    // Number of instances of the product available.\n    inventory: number;\n\n    // For setting id.\n    static id_base: number = 0;\n\n    constructor(name: string, snippet: string, price: number, deals: Deal[], imgsrc: string, inventory: number) {\n\tthis.id = Product.id_base++;\n\tthis.name = name;\n\tthis.snippet = snippet;\n\tthis.imgsrc = imgsrc;\n\tthis.inventory = inventory;\n\t// 1-count price is input separately, to insure we get one.\n\tdeals.push(new Deal(1, price));\n\tthis.deals = deals;\n\t// Deals must be sorted by count, for when we calculate the total.\n\tthis.deals.sort((left, right) => {\n\t\tif (left.count < right.count) return -1;\n\t\tif (left.count > right.count) return 1;\n\t\treturn 0;\n\t    });\n    }\n}\n\n// Hardcoded list of products in the store.\nconst PRODUCTS: Product[] =\n    [\n     new Product(\"Lamy 2000 (fine nib)\", \"Precision German pen-gineering.\", 150.00, [new Deal(2, 275.00)], \"lamy_2000.jpg\", 23),\n     new Product(\"Lil Wayne's Guitar\", \"Has most strings.\", 2600.00, [new Deal(5, 12000.00)], \"lil_wayne_guitar.jpg\", 14),\n     new Product(\"Yacht\", \"Apparently haunted.\", 35000.00, [], \"yacht.jpg\", 4),\n     new Product(\"500 Tongue Depressors\", \"Slightly used.\", 12.00, [new Deal(5, 55.00), new Deal(20, 200)], \"tongue_depressors.jpg\", 350),\n     new Product(\"Decoder Ring\", \"One size fits all.\", 0.02, [new Deal(300, 5.99)], \"decoder_ring.jpg\", 5),\n     new Product(\"Burned Quarter\", \"Found near the road.\", 0.25, [], \"burned_quarter.jpg\", 12),\n     new Product(\"Wool Hat\", \"Found near the quarter.\", 1.00, [new Deal(10, 9.00), new Deal(100, 84.00)], \"wool_hat.jpg\", 45)\n     ];\n\n// Tracks information about items customer will purchase.\nexport class Purchase {\n    // Quantity of instances of the product to be purchased.\n    quantity: number;\n    // Which product is bought.\n    product: Product;\n\n    constructor(product: Product) {\n\tthis.quantity = 0;\n\tthis.product = product;\n    }\n}\n\n// Contains a list of purchases and manages the functionality for totaling their prices.\nexport class Basket {\n    // List of purchases.\n    // All purchases have quantity > 0.\n    // Products within purchases are unique.\n    purchases: Purchase[] = [];\n    // Total value of all purchases.  Only known after getTotal();\n    // Otherwise hidden.\n    total: number = 0;\n    // Total is hidden unless getTotal() was just called.  All other functions\n    // hide the total.\n    showTotal: boolean = false;\n\n    // For internal use.  Gets the index of the purchase containing the input product.\n    // Returns -1 if product has not been purchased.\n    getIndex(product: Product): number {\n\tfor (var i = 0; i < this.purchases.length; ++i) {\n\t    var purchase = this.purchases[i];\n\t    if (purchase.product.id == product.id) {\n\t\treturn i;\n\t    }\n\t}\n\treturn -1;\n    }\n \n    // Returns the quanity of the product bought.\n    // Returns 0 if product not in list.\n    getQuantity(product: Product): number {\n\tvar index = this.getIndex(product);\n\tif (index != -1) {\n\t    return this.purchases[index].quantity;\n\t}\n\treturn 0;\n    }\n\n    // Buy a copy of the product.  Creates a purchase for the product if none exists,\n    // increments the quantity of the purchase.\n    buy(product: Product) {\n\t// Hide total because this operation invalidates it.\n\tthis.showTotal = false;\n\tvar index = this.getIndex(product);\n\tif (index == -1) {\n\t    this.purchases.push(new Purchase(product));\n\t    index = this.purchases.length - 1;\n\t}\n\tthis.purchases[index].quantity += 1;\n    }\n\n    // Remove a product from the purchases.  If product hasn't been bought, makes no change.\n    // If product has been bought, decrements the quantity of its purchase.  If quantity is\n    // now 0, removes the purchase from the list.\n    // Returns the number of items unbought (0 or 1).\n    unbuy(product: Product): number {\n\t// Hide total because this operation invalidates it.\n\tthis.showTotal = false;\n\tvar index = this.getIndex(product);\n\tif (index == -1) {\n\t    return 0;\n\t}\n\tthis.purchases[index].quantity -= 1;\n\tif (this.purchases[index].quantity <= 0) {\n\t    this.purchases.splice(index, 1);\n\t}\n\treturn 1;\n    }\n\n    // Calculates the total value of all purchases and stores in this.total, then sets\n    // the basket to show the total.\n    getTotal(): void {\n\tthis.total = 0;\n\tfor (var i = 0; i < this.purchases.length; ++i) {\n\t    // Loop over all purchases.\n\t    var purchase = this.purchases[i];\n\t    var product: Product = purchase.product;\n\t    var purchased: number  = purchase.quantity;\n\t    for (var j = product.deals.length - 1; j >= 0; --j) {\n\t\t// Loop through all deals in reverse, i.e. decreasing count, so tht you break\n\t\t// the total quantity up into the biggest possible chunks, price those, then \n\t\t// price the remainder according to the lower-count deals.  Because the 0th\n\t\t// deal has a count of 1, there will be no remainder after calculating its price.\n\t\t// Every deal list contains a deal with a count of 1, so every quantity can be\n\t\t// assigned a price.\n\t\tvar deal: Deal = product.deals[j];\n\t\tthis.total += Math.trunc(purchased / deal.count) * deal.price;\n\t\tpurchased %= deal.count;\n\t    }\n\t}\n\tthis.showTotal = true;\n    }\n}\n\n// Stores information about the customer.  Very primative.\nexport class Customer {\n    // Information about the customer's purchases.\n    basket: Basket;\n    // The customer's username.\n    username: string;\n\n    constructor(username: string) {\n\tthis.username = username;\n\tthis.basket = new Basket();\n    }\n}"]}